import React, { useState } from "react";
import { Button } from "@/components/ui/button";
import {\n  Dialog,\n  DialogContent,\n  DialogDescription,\n  DialogHeader,\n  DialogTitle,\n  DialogTrigger,\n} from "@/components/ui/dialog";\nimport { Input } from "@/components/ui/input";\nimport { Share2, Copy, Check, Twitter, Linkedin, Facebook } from "lucide-react";\n\ninterface Book {\n  id: string;\n  title: string;\n  author: string;\n  relevantChapters?: Array<{\n    chapter: string;\n    title: string;\n    relevanceScore: number;\n  }>;\n}\n\ninterface ResultsShareButtonProps {\n  topic: string;\n  books: Book[];\n  totalChapters: number;\n}\n\nexport default function ResultsShareButton({\n  topic,\n  books,\n  totalChapters,\n}: ResultsShareButtonProps) {\n  const [isOpen, setIsOpen] = useState(false);\n  const [copied, setCopied] = useState(false);\n\n  const generateShareableUrl = () => {\n    const currentUrl = window.location.href;\n    // In a real app, you'd generate a shareable URL with the search results\n    // For now, we'll use the current URL with the topic\n    const url = new URL(currentUrl);\n    url.searchParams.set("topic", topic);\n    return url.toString();\n  };\n\n  const generateShareText = () => {\n    const topBooks = books.slice(0, 3);\n    const bookList = topBooks\n      .map((book) => `📖 ${book.title} by ${book.author}`)\n      .join("\\n");\n\n    return `🔍 Just discovered ${totalChapters} relevant chapters for \"${topic}\"!\\n\\n${bookList}${books.length > 3 ? `\\n...and ${books.length - 3} more books` : ""}\\n\\nFound these insights using Chapter Discovery 📚`;\n  };\n\n  const copyToClipboard = async () => {\n    const shareText = `${generateShareText()}\\n\\n${generateShareableUrl()}`;\n    try {\n      await navigator.clipboard.writeText(shareText);\n      setCopied(true);\n      setTimeout(() => setCopied(false), 2000);\n    } catch (error) {\n      console.error("Failed to copy:", error);\n    }\n  };\n\n  const shareOnPlatform = (platform: string) => {\n    const text = encodeURIComponent(generateShareText());\n    const url = encodeURIComponent(generateShareableUrl());\n\n    const urls = {\n      twitter: `https://twitter.com/intent/tweet?text=${text}&url=${url}`,\n      linkedin: `https://www.linkedin.com/sharing/share-offsite/?url=${url}&summary=${text}`,\n      facebook: `https://www.facebook.com/sharer/sharer.php?u=${url}&quote=${text}`,\n    };\n\n    window.open(urls[platform as keyof typeof urls], "_blank", "width=600,height=400");\n  };\n\n  return (\n    <Dialog open={isOpen} onOpenChange={setIsOpen}>\n      <DialogTrigger asChild>\n        <Button\n          variant="outline"\n          className="bg-white/70 dark:bg-gray-800/70 border-2 border-blue-200 dark:border-blue-800 hover:border-blue-400 dark:hover:border-blue-600 text-blue-700 dark:text-blue-300 hover:bg-blue-50 dark:hover:bg-blue-900/20"\n        >\n          <Share2 className="w-4 h-4 mr-2" />\n          Share Results\n        </Button>\n      </DialogTrigger>\n      <DialogContent className="sm:max-w-md">\n        <DialogHeader>\n          <DialogTitle className="flex items-center">\n            <Share2 className="w-5 h-5 mr-2 text-blue-600" />\n            Share Your Discovery\n          </DialogTitle>\n          <DialogDescription>\n            Share your chapter discovery results with others\n          </DialogDescription>\n        </DialogHeader>\n        \n        <div className="space-y-4">\n          {/* Preview */}\n          <div className="bg-gray-50 dark:bg-gray-800 p-4 rounded-lg border">\n            <h4 className="font-semibold text-gray-900 dark:text-white mb-2">\n              Preview:\n            </h4>\n            <p className="text-sm text-gray-700 dark:text-gray-300 whitespace-pre-line">\n              {generateShareText()}\n            </p>\n          </div>\n          \n          {/* URL */}\n          <div className="space-y-2">\n            <label className="text-sm font-medium text-gray-700 dark:text-gray-300">\n              Link:\n            </label>\n            <div className="flex space-x-2">\n              <Input\n                value={generateShareableUrl()}\n                readOnly\n                className="text-sm"\n              />\n              <Button\n                size="sm"\n                onClick={copyToClipboard}\n                variant={copied ? "default" : "outline"}\n                className={copied ? "bg-green-600 hover:bg-green-700" : ""}\n              >\n                {copied ? (\n                  <Check className="w-4 h-4" />\n                ) : (\n                  <Copy className="w-4 h-4" />\n                )}\n              </Button>\n            </div>\n          </div>\n          \n          {/* Social Media Buttons */}\n          <div className="space-y-2">\n            <label className="text-sm font-medium text-gray-700 dark:text-gray-300">\n              Share on:\n            </label>\n            <div className="flex space-x-2">\n              <Button\n                size="sm"\n                onClick={() => shareOnPlatform("twitter")}\n                className="bg-blue-500 hover:bg-blue-600 text-white flex-1"\n              >\n                <Twitter className="w-4 h-4 mr-2" />\n                Twitter\n              </Button>\n              <Button\n                size="sm"\n                onClick={() => shareOnPlatform("linkedin")}\n                className="bg-blue-700 hover:bg-blue-800 text-white flex-1"\n              >\n                <Linkedin className="w-4 h-4 mr-2" />\n                LinkedIn\n              </Button>\n              <Button\n                size="sm"\n                onClick={() => shareOnPlatform("facebook")}\n                className="bg-blue-600 hover:bg-blue-700 text-white flex-1"\n              >\n                <Facebook className="w-4 h-4 mr-2" />\n                Facebook\n              </Button>\n            </div>\n          </div>\n        </div>\n      </DialogContent>\n    </Dialog>\n  );\n}', "replace_all": false}]